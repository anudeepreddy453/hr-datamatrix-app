# Check what users already exist
from app import app, db, User

with app.app_context():
    users = User.query.all()
    print(f"Found {len(users)} existing users:")
    for user in users:
        print(f"- {user.email}: {user.status}")
#####################
# Delete all existing users to start fresh
with app.app_context():
    User.query.delete()
    db.session.commit()
    print("🗑️  Deleted all existing users")
#################
# Add users one by one (run this after Step 1 works)
from app import app, db, User
from werkzeug.security import generate_password_hash
from datetime import datetime

with app.app_context():
    # Add users one by one
    users_to_add = [
        {
            "name": "Admin User",
            "email": "admin@company.com",
            "password": "Admin@123",
            "role": "admin",
            "department": "HR"
        },
        {
            "name": "Priya Sharma",
            "email": "priya.sharma@ccr.com",
            "password": "Priya@123",
            "role": "admin",
            "department": "CCR"
        },
        {
            "name": "Rohan Mehta",
            "email": "rohan.mehta@i2r.com",
            "password": "Rohan@123",
            "role": "admin",
            "department": "I2R"
        }
    ]
    
    for user_data in users_to_add:
        try:
            user = User(
                name=user_data['name'],
                email=user_data['email'],
                password_hash=generate_password_hash(user_data['password']),
                role=user_data['role'],
                department=user_data['department'],
                status='active',
                created_at=datetime.utcnow(),
                approved_at=datetime.utcnow()
            )
            
            db.session.add(user)
            db.session.commit()
            print(f"✅ Created: {user_data['email']} / {user_data['password']}")
            
        except Exception as e:
            print(f"❌ Error creating {user_data['email']}: {e}")
            db.session.rollback()
##############################
# Add more users
more_users = [
    {
        "name": "Anjali Verma",
        "email": "anjali.verma@mkd.com",
        "password": "Anjali@123",
        "role": "admin",
        "department": "MKD"
    },
    {
        "name": "Vikram Rao",
        "email": "vikram.rao@bacardi.com",
        "password": "Vikram@123",
        "role": "admin",
        "department": "Bacardi"
    },
    {
        "name": "Sneha Kapoor",
        "email": "sneha.kapoor@xone.com",
        "password": "Sneha@123",
        "role": "admin",
        "department": "Xone"
    },
    {
        "name": "Arjun Malhotra",
        "email": "arjun.malhotra@cis.com",
        "password": "Arjun@123",
        "role": "admin",
        "department": "CIS"
    },
    {
        "name": "Neha Singh",
        "email": "neha.singh@dir.com",
        "password": "Neha@123",
        "role": "admin",
        "department": "DIR"
    }
]

for user_data in more_users:
    try:
        user = User(
            name=user_data['name'],
            email=user_data['email'],
            password_hash=generate_password_hash(user_data['password']),
            role=user_data['role'],
            department=user_data['department'],
            status='active',
            created_at=datetime.utcnow(),
            approved_at=datetime.utcnow()
        )
        
        db.session.add(user)
        db.session.commit()
        print(f"✅ Created: {user_data['email']} / {user_data['password']}")
        
    except Exception as e:
        print(f"❌ Error creating {user_data['email']}: {e}")
        db.session.rollback()
##########################
# Add remaining users
final_users = [
    {
        "name": "Karan Patel",
        "email": "karan.patel@cqis.com",
        "password": "Karan@123",
        "role": "admin",
        "department": "CQIS"
    },
    {
        "name": "Meera Nair",
        "email": "meera.nair@osd.com",
        "password": "Meera@123",
        "role": "admin",
        "department": "OSD"
    },
    {
        "name": "Suresh Reddy",
        "email": "suresh.reddy@dat.com",
        "password": "Suresh@123",
        "role": "admin",
        "department": "DAT"
    },
    {
        "name": "Aditi Joshi",
        "email": "aditi.joshi@dlf.com",
        "password": "Aditi@123",
        "role": "admin",
        "department": "DLF"
    },
    {
        "name": "Kavya Menon",
        "email": "kavya.menon@riskweb.com",
        "password": "Kavya@123",
        "role": "admin",
        "department": "Riskweb"
    },
    {
        "name": "Test User",
        "email": "test@test.com",
        "password": "Test@123",
        "role": "user",
        "department": "IT"
    },
    {
        "name": "HR Manager",
        "email": "hr@test.com",
        "password": "HR@123",
        "role": "hr_manager",
        "department": "HR"
    }
]

for user_data in final_users:
    try:
        user = User(
            name=user_data['name'],
            email=user_data['email'],
            password_hash=generate_password_hash(user_data['password']),
            role=user_data['role'],
            department=user_data['department'],
            status='active',
            created_at=datetime.utcnow(),
            approved_at=datetime.utcnow()
        )
        
        db.session.add(user)
        db.session.commit()
        print(f"✅ Created: {user_data['email']} / {user_data['password']}")
        
    except Exception as e:
        print(f"❌ Error creating {user_data['email']}: {e}")
        db.session.rollback()
###################
# Show all users
all_users = User.query.all()
print(f"\n📊 Total users: {len(all_users)}")

print("\n📋 All Login Credentials:")
print("=" * 50)
for user in all_users:
    print(f"Email: {user.email}")
    print(f"Password: {user.name.split()[0]}@123")
    print(f"Role: {user.role}")
    print("-" * 30)
